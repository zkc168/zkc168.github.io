webpackJsonp([9],{479:function(n,s){n.exports={content:["article",["h4","\u521b\u5efaform\u8868\u5355"],["pre",{lang:null,highlighted:'export function <span class="token function">createRequestForm</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> that<span class="token punctuation">)</span> {\n\tlet items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">.</span>url<span class="token punctuation">)</span> {\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>let p <span class="token keyword">in</span> datas<span class="token punctuation">.</span>params<span class="token punctuation">)</span> {\n\t\t\titems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>input key<span class="token operator">=</span>{p} type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span>{p} value<span class="token operator">=</span>{datas<span class="token punctuation">.</span>params<span class="token punctuation">[</span>p<span class="token punctuation">]</span>}<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>\n\t\t}\n\t\treturn <span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>form key<span class="token operator">=</span>{datas<span class="token punctuation">.</span>formId} ref<span class="token operator">=</span>{unionForm <span class="token operator">=</span><span class="token operator">></span> {\n\t\t\t\tthat<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token operator">+</span>datas<span class="token punctuation">.</span>formId<span class="token punctuation">]</span> <span class="token operator">=</span> unionForm\n\t\t\t}} id<span class="token operator">=</span>{datas<span class="token punctuation">.</span>formId} action<span class="token operator">=</span>{datas<span class="token punctuation">.</span>url}\n\t\t\t      method<span class="token operator">=</span>{datas<span class="token punctuation">.</span>resMethod}\n\t\t\t      target<span class="token operator">=</span><span class="token string">"_self"</span><span class="token operator">></span>\n\t\t\t\t{items}\n\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span>\n\t}\n}\n{realnameData<span class="token operator">?</span>\n    <span class="token function">createRequestForm</span><span class="token punctuation">(</span>{\n            formId<span class="token punctuation">:</span> <span class="token string">\'authForm\'</span><span class="token punctuation">,</span>\n            params<span class="token punctuation">:</span> realnameData<span class="token punctuation">.</span>paraMap<span class="token punctuation">,</span>\n            url<span class="token punctuation">:</span> realnameData<span class="token punctuation">.</span>url<span class="token punctuation">,</span>\n            resMethod<span class="token punctuation">:</span> <span class="token string">\'POST\'</span>\n            }<span class="token punctuation">,</span> this<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">null</span>\n}\n<span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    <span class="token keyword">const</span> {realnameData} <span class="token operator">=</span> this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>auth<span class="token comment" spellcheck="true">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>realnameData<span class="token operator">&amp;</span><span class="token operator">&amp;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>realnameData<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> {\n        this<span class="token punctuation">.</span>_authForm<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    }\n}'},["code",'export function createRequestForm(datas, that) {\n\tlet items = [];\n\tif (datas.url) {\n\t\tfor (let p in datas.params) {\n\t\t\titems.push(<input key={p} type="hidden" name={p} value={datas.params[p]}/>)\n\t\t}\n\t\treturn (\n\t\t\t<form key={datas.formId} ref={unionForm => {\n\t\t\t\tthat["_"+datas.formId] = unionForm\n\t\t\t}} id={datas.formId} action={datas.url}\n\t\t\t      method={datas.resMethod}\n\t\t\t      target="_self">\n\t\t\t\t{items}\n\t\t\t</form>\n\t\t)\n\t}\n}\n{realnameData?\n    createRequestForm({\n            formId: \'authForm\',\n            params: realnameData.paraMap,\n            url: realnameData.url,\n            resMethod: \'POST\'\n            }, this):null\n}\ncomponentDidUpdate() {\n    const {realnameData} = this.props.auth;\n    if (realnameData&&Object.keys(realnameData).length > 0) {\n        this._authForm.submit()\n    }\n}']],["h4","\u683c\u5f0f\u5316\u65f6\u95f4"],["pre",{lang:null,highlighted:'export function <span class="token function">formatDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> format<span class="token punctuation">,</span>type<span class="token punctuation">)</span> {\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">==</span><span class="token operator">=</span> <span class="token keyword">null</span> || date <span class="token operator">==</span><span class="token operator">=</span> undefined || date <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">)</span> {\n\t\treturn <span class="token string">""</span><span class="token comment" spellcheck="true">;</span>\n\t}\n\t<span class="token keyword">switch</span> <span class="token punctuation">(</span>format<span class="token punctuation">)</span> {\n\t\t<span class="token operator">/</span><span class="token operator">/</span> \u5e74\u6708\n\t\t<span class="token keyword">case</span> <span class="token string">"yyyymm"</span><span class="token punctuation">:</span>\n\t\t\treturn date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u5e74"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token string">""</span><span class="token punctuation">:</span><span class="token string">"\u6708"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t\t<span class="token operator">/</span><span class="token operator">/</span> \u5e74\u6708\u65e5\n\t\t<span class="token keyword">case</span> <span class="token string">"yyyymmdd"</span><span class="token punctuation">:</span>\n\t\t\treturn date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u5e74"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u6708"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token string">" "</span><span class="token punctuation">:</span><span class="token string">"\u65e5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t\t<span class="token operator">/</span><span class="token operator">/</span> \u5e74\u6708\u65e5\u65f6\u5206\n\t\t<span class="token keyword">case</span> <span class="token string">"yyyymmddHHMM"</span><span class="token punctuation">:</span>\n\t\t\treturn date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u5e74"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u6708"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token string">" "</span><span class="token punctuation">:</span><span class="token string">"\u65e5"</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n\t\t\t\tdate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t\t<span class="token operator">/</span><span class="token operator">/</span> \u5e74\u6708\u65e5\u65f6\u5206\u79d2\n\t\t<span class="token keyword">case</span> <span class="token string">"yyyymmddHHMMSS"</span><span class="token punctuation">:</span>\n\t\treturn date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token punctuation">(</span>type||<span class="token string">"\u5e74"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token punctuation">(</span>type||<span class="token string">"\u6708"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token string">" "</span><span class="token punctuation">:</span><span class="token string">"\u65e5"</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n\t\tdate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>\n\t\t<span class="token operator">/</span><span class="token operator">/</span> \u6708\u65e5\u65f6\u5206\u79d2\n\t\t<span class="token keyword">case</span> <span class="token string">"mmddHHMMSS"</span><span class="token punctuation">:</span>\n\t\t\treturn date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u6708"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token string">" "</span><span class="token punctuation">:</span><span class="token string">"\u65e5"</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n\t\t\t\tdate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t\t<span class="token operator">/</span><span class="token operator">/</span> \u6708\u65e5\u65f6\u5206\n\t\t<span class="token keyword">default</span><span class="token punctuation">:</span>\n\t\t\treturn date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type||<span class="token string">"\u6708"</span><span class="token punctuation">)</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token string">" "</span><span class="token punctuation">:</span><span class="token string">"\u65e5"</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n\t\t\t\tdate<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t}\n}'},["code",'export function formatDate(date, format,type) {\n\tif (date === null || date === undefined || date === "null") {\n\t\treturn "";\n\t}\n\tswitch (format) {\n\t\t// \u5e74\u6708\n\t\tcase "yyyymm":\n\t\t\treturn date.substring(0, 4) + (type||"\u5e74") + date.substring(4, 6) + (type?"":"\u6708");\n\t\t// \u5e74\u6708\u65e5\n\t\tcase "yyyymmdd":\n\t\t\treturn date.substring(0, 4) + (type||"\u5e74") + date.substring(4, 6) + (type||"\u6708") + date.substring(6, 8) + (type?" ":"\u65e5");\n\t\t// \u5e74\u6708\u65e5\u65f6\u5206\n\t\tcase "yyyymmddHHMM":\n\t\t\treturn date.substring(0, 4) + (type||"\u5e74") + date.substring(4, 6) + (type||"\u6708") + date.substring(6, 8) + (type?" ":"\u65e5") +\n\t\t\t\tdate.substring(8, 10) + ":" + date.substring(10, 12);\n\t\t// \u5e74\u6708\u65e5\u65f6\u5206\u79d2\n\t\tcase "yyyymmddHHMMSS":\n\t\treturn date.substring(0, 4) +  (type||"\u5e74") + date.substring(4, 6) +  (type||"\u6708") + date.substring(6, 8) + (type?" ":"\u65e5") +\n\t\tdate.substring(8, 10) + ":" + date.substring(10, 12) + ":" + date.substring(12, 14)\n\t\t// \u6708\u65e5\u65f6\u5206\u79d2\n\t\tcase "mmddHHMMSS":\n\t\t\treturn date.substring(4, 6) + (type||"\u6708") + date.substring(6, 8) + (type?" ":"\u65e5") +\n\t\t\t\tdate.substring(8, 10) + ":" + date.substring(10, 12) + ":" + date.substring(12, 14);\n\t\t// \u6708\u65e5\u65f6\u5206\n\t\tdefault:\n\t\t\treturn date.substring(4, 6) + (type||"\u6708") + date.substring(6, 8) + (type?" ":"\u65e5") +\n\t\t\t\tdate.substring(8, 10) + ":" + date.substring(10, 12);\n\t}\n}']],["h4","h5 \u79fb\u52a8\u7aef\u7981\u6b62\u9875\u9762\u6eda\u52a8"],["pre",{lang:null,highlighted:'var handle <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>{\n    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">; //\u963b\u6b62\u5143\u7d20\u53d1\u751f\u9ed8\u8ba4\u7684\u884c\u4e3a</span>\n}\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'touchmove\'</span><span class="token punctuation">,</span>handle<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;//\u6dfb\u52a0\u76d1\u542c\u4e8b\u4ef6--\u9875\u9762\u4e0d\u53ef\u6eda\u52a8</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">\'touchmove\'</span><span class="token punctuation">,</span>handle<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;//\u79fb\u9664\u76d1\u542c\u4e8b\u4ef6--\u9875\u9762\u6062\u590d\u53ef\u6eda\u52a8</span>'},["code","var handle = function(event){\n    event.preventDefault(); //\u963b\u6b62\u5143\u7d20\u53d1\u751f\u9ed8\u8ba4\u7684\u884c\u4e3a\n}\ndocument.body.addEventListener('touchmove',handle,false);//\u6dfb\u52a0\u76d1\u542c\u4e8b\u4ef6--\u9875\u9762\u4e0d\u53ef\u6eda\u52a8\ndocument.body.removeEventListener('touchmove',handle,false);//\u79fb\u9664\u76d1\u542c\u4e8b\u4ef6--\u9875\u9762\u6062\u590d\u53ef\u6eda\u52a8"]],["h4","\u6a21\u5757\u7ed3\u6784\u4e66\u5199"],["pre",{lang:null,highlighted:'var mobileMeetingDetails <span class="token operator">=</span> function <span class="token punctuation">(</span>options<span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}\nmobileMeetingDetails<span class="token punctuation">.</span>prototype <span class="token operator">=</span> {\n    initialize<span class="token punctuation">:</span> function <span class="token punctuation">(</span>options<span class="token punctuation">)</span> {\n    \n    }<span class="token punctuation">,</span>\n    render<span class="token punctuation">:</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    \n    }<span class="token punctuation">,</span>\n    dispose<span class="token punctuation">:</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    }\n}\n\nmobileMeetingDetails<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_renderContent <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>{\n\n}<span class="token comment" spellcheck="true">;</span>\nmobileMeetingDetails<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_renderCallback <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span>{\n\n}\nmobileMeetingDetails<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_created <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> {\n\n}\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> mobileMeetingDetails'},["code","var mobileMeetingDetails = function (options) {\n    this.initialize(options);\n}\nmobileMeetingDetails.prototype = {\n    initialize: function (options) {\n    \n    },\n    render: function () {\n    \n    },\n    dispose: function () {\n    }\n}\n\nmobileMeetingDetails.prototype._renderContent = function(headers){\n\n};\nmobileMeetingDetails.prototype._renderCallback = function(err, data){\n\n}\nmobileMeetingDetails.prototype._created = function () {\n\n}\nmodule.exports = mobileMeetingDetails"]],["h4","\u9632\u6296\u52a8\u4e8b\u4ef6"],["pre",{lang:null,highlighted:'let timer<span class="token comment" spellcheck="true">;</span>\ntobillPay <span class="token operator">=</span> <span class="token punctuation">(</span>housenum<span class="token punctuation">,</span> agreechecked<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        this<span class="token punctuation">.</span><span class="token function">tobillPay1</span><span class="token punctuation">(</span>housenum<span class="token punctuation">,</span> agreechecked<span class="token punctuation">)</span>\n    }<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}'},["code","let timer;\ntobillPay = (housenum, agreechecked) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n        this.tobillPay1(housenum, agreechecked)\n    }, 500);\n}"]],["h4","\u65e0\u9650\u6781\u83dc\u5355\u6811\u6e32\u67d3"],["pre",{lang:null,highlighted:'<span class="token operator">&lt;</span>Tree defaultExpandedKeys<span class="token operator">=</span>{defaultExpandedKeys}<span class="token operator">></span>\n{this<span class="token punctuation">.</span><span class="token function">generateMenu</span><span class="token punctuation">(</span>treeData<span class="token punctuation">)</span>}\n<span class="token operator">&lt;</span><span class="token operator">/</span>Tree<span class="token operator">></span>\n<span class="token function">generateMenu</span><span class="token punctuation">(</span>menuObj<span class="token punctuation">)</span> {\n    let vdom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token function">if</span><span class="token punctuation">(</span>menuObj<span class="token punctuation">)</span>{\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>menuObj instanceof Array<span class="token punctuation">)</span> {\n            let list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>var item of menuObj<span class="token punctuation">)</span> {\n                list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span><span class="token function">generateMenu</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            }\n            vdom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        } <span class="token keyword">else</span> {\n            vdom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n                <span class="token operator">&lt;</span>TreeNode title<span class="token operator">=</span>{menuObj<span class="token punctuation">.</span>abilityName} key<span class="token operator">=</span>{menuObj<span class="token punctuation">.</span>abilityId}<span class="token operator">></span>\n            {this<span class="token punctuation">.</span><span class="token function">generateMenu</span><span class="token punctuation">(</span>menuObj<span class="token punctuation">.</span>children<span class="token punctuation">)</span>}\n                <span class="token operator">&lt;</span><span class="token operator">/</span>TreeNode<span class="token operator">></span>\n            <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n        return vdom<span class="token comment" spellcheck="true">;</span>\n    }\n}'},["code","<Tree defaultExpandedKeys={defaultExpandedKeys}>\n{this.generateMenu(treeData)}\n</Tree>\ngenerateMenu(menuObj) {\n    let vdom = [];\n    if(menuObj){\n        if (menuObj instanceof Array) {\n            let list = [];\n            for (var item of menuObj) {\n                list.push(this.generateMenu(item));\n            }\n            vdom.push(list);\n        } else {\n            vdom.push(\n                <TreeNode title={menuObj.abilityName} key={menuObj.abilityId}>\n            {this.generateMenu(menuObj.children)}\n                </TreeNode>\n            );\n        }\n        return vdom;\n    }\n}"]],["h4","\u7ec4\u6210id\uff0cpid\u683c\u5f0f"],["pre",{lang:null,highlighted:'var data <span class="token operator">=</span> <span class="token punctuation">[</span>\n<span class="token string">\'/analysed/order/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/analysed/tradeflow/settleflow/tradeflow/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/analysed/unsettleflow/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/analysed/tradeflow/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/bill/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/operator/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/refund/approved/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/refund/flow/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/setting/\'</span><span class="token punctuation">,</span>\n<span class="token string">\'/setting/operator/\'</span><span class="token punctuation">]</span>\nlet firstMenu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>menuConfig<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n_<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    let pathArr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    pathArr <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span>pathArr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    _<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pathArr<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        <span class="token function">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> firstMenu<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>{\n            firstMenu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n            menuConfig<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>{\n                <span class="token string">\'id\'</span><span class="token punctuation">:</span>`${firstMenu<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>}`<span class="token punctuation">,</span>\n                <span class="token string">\'pid\'</span><span class="token punctuation">:</span><span class="token string">\'-1\'</span><span class="token punctuation">,</span>\n                <span class="token string">\'name\'</span><span class="token punctuation">:</span>val<span class="token punctuation">,</span>\n                <span class="token string">\'level\'</span><span class="token punctuation">:</span><span class="token number">0</span>\n            }<span class="token punctuation">)</span>\n        }\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> {\n            let pidObj <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>menuConfig<span class="token punctuation">,</span> <span class="token punctuation">(</span>out<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n                return out<span class="token punctuation">[</span><span class="token string">"level"</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> out<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> pathArr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n            }<span class="token punctuation">)</span>\n            menuConfig<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>{\n                <span class="token string">\'id\'</span><span class="token punctuation">:</span>`${i}${j}`<span class="token punctuation">,</span>\n                <span class="token string">\'pid\'</span><span class="token punctuation">:</span>pidObj<span class="token punctuation">[</span><span class="token string">\'id\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token string">\'name\'</span><span class="token punctuation">:</span>val<span class="token punctuation">,</span>\n                <span class="token string">\'level\'</span><span class="token punctuation">:</span>j\n            }<span class="token punctuation">)</span>\n        }\n    }<span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>menuConfig<span class="token punctuation">)</span>'},["code","var data = [\n'/analysed/order/',\n'/analysed/tradeflow/settleflow/tradeflow/',\n'/analysed/unsettleflow/',\n'/analysed/tradeflow/',\n'/bill/',\n'/operator/',\n'/refund/approved/',\n'/refund/flow/',\n'/setting/',\n'/setting/operator/']\nlet firstMenu = [],menuConfig=[];\n_.forEach(data, (item,i) => {\n    let pathArr = item.substring(1,item.length-1).split('/');\n    pathArr = _.compact(pathArr);\n    _.forEach(pathArr, (val,j) => {\n        if(j==0 && firstMenu.indexOf(val) == -1){\n            firstMenu.push(val)\n            menuConfig.push({\n                'id':`${firstMenu.indexOf(val)}`,\n                'pid':'-1',\n                'name':val,\n                'level':0\n            })\n        }\n        if (j > 0) {\n            let pidObj = _.find(menuConfig, (out) => {\n                return out[\"level\"] === j-1 && out[\"name\"] === pathArr[j-1]\n            })\n            menuConfig.push({\n                'id':`${i}${j}`,\n                'pid':pidObj['id'],\n                'name':val,\n                'level':j\n            })\n        }\n    })\n})\nconsole.log(menuConfig)"]],["h4","\u6570\u7ec4\u91cc\u7684\u5bf9\u8c61name\u76f8\u540c\u7684\u5408\u5e76"],["pre",{lang:null,highlighted:'let item<span class="token operator">=</span><span class="token punctuation">[</span>\n    {\n        label<span class="token punctuation">:</span> <span class="token string">\'\u5546\u6237ID\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'merchantId\'</span><span class="token punctuation">,</span>\n        isTable<span class="token punctuation">:</span>{\n            order<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Input<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    {\n        label<span class="token punctuation">:</span> <span class="token string">\'\u5546\u6237ID\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'merchantId\'</span><span class="token punctuation">,</span>\n        isQuery<span class="token punctuation">:</span>{\n            order<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Input<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    {\n        label<span class="token punctuation">:</span> <span class="token string">\'\u64cd\u4f5c\u5458\u8d26\u53f7\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'operatorAccount\'</span><span class="token punctuation">,</span>\n        isQuery<span class="token punctuation">:</span>{\n            order<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Input<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    {\n        label<span class="token punctuation">:</span> <span class="token string">\'\u64cd\u4f5c\u5458\u8d26\u53f7\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'operatorAccount\'</span><span class="token punctuation">,</span>\n        isTable<span class="token punctuation">:</span>{\n            order<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Input<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    {\n        label<span class="token punctuation">:</span> <span class="token string">\'\u64cd\u4f5c\u5458\u59d3\u540d\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'operatorName\'</span><span class="token punctuation">,</span>\n        isTable<span class="token punctuation">:</span>{\n            order<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Input<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\nlet arrName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arrItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n_<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token function">if</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arrName<span class="token punctuation">,</span> val<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>{\n        let sameIndex <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arrName<span class="token punctuation">,</span> val<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        arrItem<span class="token punctuation">[</span>sameIndex<span class="token punctuation">]</span> <span class="token operator">=</span>  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>{}<span class="token punctuation">,</span> arrItem<span class="token punctuation">[</span>sameIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        return<span class="token comment" spellcheck="true">;</span>\n    }<span class="token keyword">else</span>{\n        arrName<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        arrItem<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n}<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrItem<span class="token punctuation">)</span>'},["code","let item=[\n    {\n        label: '\u5546\u6237ID',\n        name: 'merchantId',\n        isTable:{\n            order:0,\n        },\n        component:Input,\n    },\n    {\n        label: '\u5546\u6237ID',\n        name: 'merchantId',\n        isQuery:{\n            order:0,\n        },\n        component:Input,\n    },\n    {\n        label: '\u64cd\u4f5c\u5458\u8d26\u53f7',\n        name: 'operatorAccount',\n        isQuery:{\n            order:1,\n        },\n        component:Input,\n    },\n    {\n        label: '\u64cd\u4f5c\u5458\u8d26\u53f7',\n        name: 'operatorAccount',\n        isTable:{\n            order:1,\n        },\n        component:Input,\n    },\n    {\n        label: '\u64cd\u4f5c\u5458\u59d3\u540d',\n        name: 'operatorName',\n        isTable:{\n            order:2,\n        },\n        component:Input,\n    },\n]\nlet arrName = [],arrItem = [];\n_.forEach(item, (val,index) => {\n    if(_.indexOf(arrName, val.name)>-1){\n        let sameIndex = _.indexOf(arrName, val.name);\n        arrItem[sameIndex] =  Object.assign({}, arrItem[sameIndex], val);\n        return;\n    }else{\n        arrName.push(val.name);\n        arrItem.push(val);\n    }\n})\nconsole.log(arrItem)"]],["h4","\u6eda\u52a8\u5230\u5e95\u90e8\u52a0\u8f7d\u66f4\u591a"],["pre",{lang:null,highlighted:'window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'scroll\'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n    var scrollTop<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop || document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    var clientHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight || document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    var scrollHeight <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight || document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>scrollTop <span class="token operator">+</span> clientHeight<span class="token punctuation">)</span> <span class="token operator">==</span> scrollHeight<span class="token punctuation">)</span>{\n        <span class="token operator">/</span><span class="token operator">/</span>\u6eda\u52a8\u5230\u5e95\u90e8\u4e86\n        <span class="token function">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>loadmore<span class="token punctuation">)</span>{\n            self<span class="token punctuation">.</span>skip <span class="token operator">+=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">;</span>\n            self<span class="token punctuation">.</span><span class="token function">updateRecordDataAction</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dealData<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n    }\n}<span class="token punctuation">)</span>'},["code","window.addEventListener('scroll',function(){\n    var scrollTop=Math.ceil(document.documentElement.scrollTop || document.body.scrollTop);\n    var clientHeight = Math.ceil(document.documentElement.clientHeight || document.body.clientHeight);\n    var scrollHeight =  Math.ceil(document.documentElement.scrollHeight || document.body.scrollHeight);\n    if((scrollTop + clientHeight) == scrollHeight){\n        //\u6eda\u52a8\u5230\u5e95\u90e8\u4e86\n        if(self.loadmore){\n            self.skip += 20;\n            self.updateRecordDataAction(self.dealData);\n        }\n    }\n})"]],["h4","\u66ff\u6362\u6a21\u677f"],["pre",{lang:null,highlighted:'var templateRe <span class="token operator">=</span> <span class="token operator">/</span>\\{ <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\\w_\\<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">*</span>\\}<span class="token operator">/</span>g<span class="token comment" spellcheck="true">;</span>\nvar stringTemplate <span class="token operator">=</span> function <span class="token punctuation">(</span>str<span class="token punctuation">,</span> data<span class="token punctuation">)</span> {\n  return str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>templateRe<span class="token punctuation">,</span> function <span class="token punctuation">(</span>str<span class="token punctuation">,</span> key<span class="token punctuation">)</span> {\n    var value <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span><span class="token operator">=</span> undefined<span class="token punctuation">)</span> {\n      throw new <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">\'No value provided for variable \'</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n    } <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof value <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> {\n      value <span class="token operator">=</span> <span class="token function">value</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n    return value<span class="token comment" spellcheck="true">;</span>\n  }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}'},["code","var templateRe = /\\{ *([\\w_\\-]+) *\\}/g;\nvar stringTemplate = function (str, data) {\n  return str.replace(templateRe, function (str, key) {\n    var value = data[key];\n\n    if (value === undefined) {\n      throw new Error('No value provided for variable ' + str);\n\n    } else if (typeof value === 'function') {\n      value = value(data);\n    }\n    return value;\n  });\n}"]],["h4","tapEvent"],["pre",{lang:null,highlighted:'<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> {\n    <span class="token string">"use strict"</span><span class="token comment" spellcheck="true">;</span>\n    $<span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n        var startX<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> \u5f00\u59cb\u6a2a\u5750\u6807\n        startY<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> \u5f00\u59cb\u7eb5\u5750\u6807\n        endX<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> \u7ed3\u675f\u6a2a\u5750\u6807\n        endY<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> \u7ed3\u675f\u7eb5\u5750\u6807\n        startTime<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> \u6309\u4e0b\u7684\u5f00\u59cb\u65f6\u95f4\n        element<span class="token comment" spellcheck="true">;</span>\n        <span class="token operator">/</span><span class="token operator">/</span> \u89e6\u53d1\u4e8b\u4ef6\u5143\u7d20\n        $<span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"touchstart"</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> {\n            var e <span class="token operator">=</span> e<span class="token punctuation">.</span>originalEvent || e<span class="token comment" spellcheck="true">;</span>\n            var touch <span class="token operator">=</span> e<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            element <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token string">"tagName"</span> <span class="token keyword">in</span> touch<span class="token punctuation">.</span>target <span class="token operator">?</span> touch<span class="token punctuation">.</span>target <span class="token punctuation">:</span> touch<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            startTime <span class="token operator">=</span> new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            startX <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientX<span class="token comment" spellcheck="true">;</span>\n            startY <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientY<span class="token comment" spellcheck="true">;</span>\n            endX <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientX<span class="token comment" spellcheck="true">;</span>\n            endY <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientY<span class="token comment" spellcheck="true">;</span>\n        }<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> {\n            var e <span class="token operator">=</span> e<span class="token punctuation">.</span>originalEvent || e<span class="token comment" spellcheck="true">;</span>\n            var touch <span class="token operator">=</span> e<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            endX <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientX<span class="token comment" spellcheck="true">;</span>\n            endY <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientY<span class="token comment" spellcheck="true">;</span>\n        }<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"touchend"</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> {\n            var e <span class="token operator">=</span> e<span class="token punctuation">.</span>originalEvent || e<span class="token comment" spellcheck="true">;</span>\n            var touch <span class="token operator">=</span> e<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            var endTime <span class="token operator">=</span> new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            <span class="token operator">/</span><span class="token operator">/</span> \u7ed3\u675f\u65f6\u95f4 <span class="token operator">-</span> \u5f00\u59cb\u65f6\u95f4 <span class="token operator">&lt;</span> <span class="token number">300</span>\u6beb\u79d2<span class="token punctuation">,</span> \u5e76\u4e14\u79fb\u52a8\u8ddd\u79bb<span class="token punctuation">(</span>\u5f00\u59cb\u5750\u6807<span class="token operator">-</span>\u7ed3\u675f\u5de6\u8fb9<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">,</span> \u5219\u89e6\u53d1\u4e8b\u4ef6 tapEvent\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> {\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> startX<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> startY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> {\n                    element<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"tapEvent"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                    element<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                    return <span class="token boolean">false</span><span class="token comment" spellcheck="true">;</span>\n                }\n            }\n            startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n            startX <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n            startY <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n            endX <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n            endY <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n        }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token punctuation">[</span> <span class="token string">"tapEvent"</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> {\n        $<span class="token punctuation">.</span>fn<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> {\n            return this<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }<span class="token comment" spellcheck="true">;</span>\n    }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token punctuation">)</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code",'(function($) {\n    "use strict";\n    $(document).ready(function() {\n        var startX, // \u5f00\u59cb\u6a2a\u5750\u6807\n        startY, // \u5f00\u59cb\u7eb5\u5750\u6807\n        endX, // \u7ed3\u675f\u6a2a\u5750\u6807\n        endY, // \u7ed3\u675f\u7eb5\u5750\u6807\n        startTime, // \u6309\u4e0b\u7684\u5f00\u59cb\u65f6\u95f4\n        element;\n        // \u89e6\u53d1\u4e8b\u4ef6\u5143\u7d20\n        $(document).on("touchstart", function(e) {\n            var e = e.originalEvent || e;\n            var touch = e.changedTouches[0];\n            element = $("tagName" in touch.target ? touch.target : touch.target.parentNode);\n            startTime = new Date();\n            startX = touch.clientX;\n            startY = touch.clientY;\n            endX = touch.clientX;\n            endY = touch.clientY;\n        }).on("touchmove", function(e) {\n            var e = e.originalEvent || e;\n            var touch = e.changedTouches[0];\n            endX = touch.clientX;\n            endY = touch.clientY;\n        }).on("touchend", function(e) {\n            var e = e.originalEvent || e;\n            var touch = e.changedTouches[0];\n            var endTime = new Date();\n            // \u7ed3\u675f\u65f6\u95f4 - \u5f00\u59cb\u65f6\u95f4 < 300\u6beb\u79d2, \u5e76\u4e14\u79fb\u52a8\u8ddd\u79bb(\u5f00\u59cb\u5750\u6807-\u7ed3\u675f\u5de6\u8fb9)<20, \u5219\u89e6\u53d1\u4e8b\u4ef6 tapEvent\n            if (endTime - startTime < 300) {\n                if (Math.abs(endX - startX) + Math.abs(endY - startY) < 30) {\n                    element.trigger("tapEvent");\n                    element.trigger("click");\n                    return false;\n                }\n            }\n            startTime = 0;\n            startX = 0;\n            startY = 0;\n            endX = 0;\n            endY = 0;\n        });\n    });\n    [ "tapEvent" ].forEach(function(eventName) {\n        $.fn[eventName] = function(callback) {\n            return this.on(eventName, callback);\n        };\n    });\n})($);']],["h4","\u62bd\u5956"],["pre",{lang:null,highlighted:'mobileMeetingPrize<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_submitbtn <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>{\n    var dom <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token string">\'.submitbtn\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    var timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n    var doc <span class="token operator">=</span> $<span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n    doc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token string">\'.start\'</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>{\n        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n        timer<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n            var random<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            $<span class="token punctuation">(</span><span class="token string">\'.winner\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        dom<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">\'start\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">\'stop\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    doc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token string">\'.stop\'</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>{\n        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        dom<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">\'stop\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">\'start\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }<span class="token punctuation">)</span>\n}'},["code","mobileMeetingPrize.prototype._submitbtn = function(arr){\n    var dom = $('.submitbtn');\n    var timer = null;\n    var doc = $(document);\n    console.log(arr)\n    doc.on('click', '.start', function(e){\n        clearInterval(timer)\n        timer=setInterval(function(){\n            var random=Math.floor(Math.random()*arr.length);\n            $('.winner').html(arr[random]);\n        },50);\n        dom.removeClass('start').addClass('stop');\n    });\n    doc.on('click', '.stop', function(e){\n        clearInterval(timer);\n        dom.removeClass('stop').addClass('start');\n    })\n}"]],["h4","_getQueryString\u65b9\u6cd5"],["pre",{lang:null,highlighted:'_getQueryString <span class="token operator">=</span> function <span class="token punctuation">(</span>name<span class="token punctuation">)</span> {\n        var reg <span class="token operator">=</span> new <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">\'(^|&amp;)\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">\'=([^&amp;]*)(&amp;|$)\'</span><span class="token punctuation">,</span> <span class="token string">\'i\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        var r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>r !<span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n            return window<span class="token punctuation">.</span><span class="token function">unescape</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n        return <span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n    }'},["code","_getQueryString = function (name) {\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n        var r = window.location.search.substr(1).match(reg);\n        if (r !== null) {\n            return window.unescape(r[2]);\n        }\n        return null;\n    }"]],["h4","endWith\uff0cstartWith\u65b9\u6cd5"],["pre",{lang:null,highlighted:'String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">endWith</span> <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>{  \n     <span class="token function">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token keyword">null</span> || str<span class="token operator">==</span><span class="token string">""</span> || this<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> ||str<span class="token punctuation">.</span>length <span class="token operator">></span> this<span class="token punctuation">.</span>length<span class="token punctuation">)</span>{      \n       return <span class="token boolean">false</span><span class="token comment" spellcheck="true">;  </span>\n     }  \n     <span class="token function">if</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>length <span class="token operator">-</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>{  \n         return <span class="token boolean">true</span><span class="token comment" spellcheck="true">;  </span>\n     }<span class="token keyword">else</span>{  \n         return <span class="token boolean">false</span><span class="token comment" spellcheck="true">;  </span>\n     }  \n     return <span class="token boolean">true</span><span class="token comment" spellcheck="true">;  </span>\n}<span class="token comment" spellcheck="true">;  </span>\n  \n String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>startWith <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>{  \n  <span class="token function">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> || str<span class="token operator">==</span> <span class="token string">""</span> || this<span class="token punctuation">.</span>length<span class="token operator">==</span> <span class="token number">0</span> || str<span class="token punctuation">.</span>length <span class="token operator">></span> this<span class="token punctuation">.</span>length<span class="token punctuation">)</span>{  \n     return <span class="token boolean">false</span><span class="token comment" spellcheck="true">;  </span>\n  }   \n  <span class="token function">if</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">)</span>{  \n     return <span class="token boolean">true</span><span class="token comment" spellcheck="true">;  </span>\n  }<span class="token keyword">else</span>{  \n     return <span class="token boolean">false</span><span class="token comment" spellcheck="true">;  </span>\n   }         \n  return <span class="token boolean">true</span><span class="token comment" spellcheck="true">;   </span>\n }<span class="token comment" spellcheck="true">;  </span>'},["code",'String.prototype.endWith = function(str){  \n     if(str==null || str=="" || this.length == 0 ||str.length > this.length){      \n       return false;  \n     }  \n     if(this.substring(this.length - str.length)){  \n         return true;  \n     }else{  \n         return false;  \n     }  \n     return true;  \n};  \n  \n String.prototype.startWith = function(str){  \n  if(str == null || str== "" || this.length== 0 || str.length > this.length){  \n     return false;  \n  }   \n  if(this.substr(0,str.length) == str){  \n     return true;  \n  }else{  \n     return false;  \n   }         \n  return true;   \n };  ']],["h4","\u65e0\u9650\u6781\u6811\u5b9e\u73b0"],["pre",{lang:null,highlighted:'var data <span class="token operator">=</span> <span class="token punctuation">[</span>\n    {id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5b89\u5fbd"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">0</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u6c5f\u82cf"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">0</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5408\u80a5"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">1</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5e90\u9633\u533a"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">3</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5927\u6768\u9547"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">4</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5357\u4eac"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">2</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u7384\u6b66\u533a"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">6</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u6885\u56ed\u65b0\u6751\u8857\u9053"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">7</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u4e0a\u6d77"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">0</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u9ec4\u6d66\u533a"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">9</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5916\u6ee9"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">10</span>}<span class="token punctuation">,</span>\n    {id<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"\u5b89\u5e86"</span><span class="token punctuation">,</span> parent_id<span class="token punctuation">:</span> <span class="token number">1</span>}\n<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n<span class="token operator">/</span><span class="token operator">/</span>\u6839\u636e\u6700\u540e\u4e00\u4e2a\u627e\u5230\u6574\u4e2a\u5bb6\u65cf\nfunction <span class="token function">familyTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pid<span class="token punctuation">)</span> {\n    var temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n    var forFn <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pid<span class="token punctuation">)</span>{\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i &lt; arr.length; i++) {</span>\n            var item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> pid<span class="token punctuation">)</span> {\n                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n                <span class="token function">forFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>item<span class="token punctuation">.</span>parent_id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            }\n        }\n    }<span class="token comment" spellcheck="true">;</span>\n    <span class="token function">forFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    return temp<span class="token comment" spellcheck="true">;</span>\n}\n<span class="token operator">/</span><span class="token operator">/</span>\u5b50\u5b59\u6811\uff0c\u4ece\u9876\u7ea7\u5f80\u4e0b\u627e\u5230\u662f\u6709\u7684\u5b50\u5b50\u5b59\u5b59\nfunction <span class="token function">sonsTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>id<span class="token punctuation">)</span>{\n    var temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lev<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n    var forFn <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> id<span class="token punctuation">,</span>lev<span class="token punctuation">)</span>{\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i &lt; arr.length; i++) {</span>\n            var item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent_id<span class="token operator">==</span>id<span class="token punctuation">)</span> {\n                item<span class="token punctuation">.</span>lev<span class="token operator">=</span>lev<span class="token comment" spellcheck="true">;</span>\n                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                <span class="token function">forFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>item<span class="token punctuation">.</span>id<span class="token punctuation">,</span>lev<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            }\n        }\n    }<span class="token comment" spellcheck="true">;</span>\n    <span class="token function">forFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> id<span class="token punctuation">,</span>lev<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    return temp<span class="token comment" spellcheck="true">;</span>\n}\nvar tree <span class="token operator">=</span> <span class="token function">sonsTree</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\nvar temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n<span class="token function">for</span><span class="token punctuation">(</span>var i<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">;i&lt;tree.length;i++){</span>\n    var item <span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>u <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token function">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>{\n        u <span class="token operator">=</span> <span class="token string">"&lt;/ul>"</span><span class="token comment" spellcheck="true">;</span>\n    }\n    <span class="token function">if</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">\'lev\'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>{\n        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token string">\'&lt;li>&lt;a class="one">\'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">\'&lt;/a>&lt;ul>\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }<span class="token keyword">else</span>{\n        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'&lt;li>&lt;a>\'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">\'&lt;/a>&lt;/li>\'</span><span class="token punctuation">)</span>\n    }\n    <span class="token function">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>tree<span class="token punctuation">.</span>length<span class="token punctuation">)</span>{\n        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"&lt;/ul>"</span><span class="token punctuation">)</span>\n    }\n}\ntemp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sidebar-nav"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>temp\n\n\n\n\n\n\n<span class="token function">InfiniteCycle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>{\n  var temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n  var forFn <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>{\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i &lt; arr.length; i++) {</span>\n          <span class="token function">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span>{\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>\n              <span class="token keyword">for</span> <span class="token punctuation">(</span>var j <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; j &lt; arr[i].children.length; j++) {</span>\n                  <span class="token function">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span>{\n                      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>\n                      <span class="token function">forFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                  }\n              }\n          }<span class="token keyword">else</span>{\n              var tpl <span class="token operator">=</span> `<span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"nav-item"</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span><span class="token keyword">to</span><span class="token operator">=</span>${arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>path} class<span class="token operator">=</span><span class="token string">"nav-link"</span><span class="token operator">></span><span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"icon-speedometer"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> ${arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title} <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"badge badge-info"</span><span class="token operator">></span>NEW<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>`\n              temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;;</span>\n          }\n      }\n  }<span class="token comment" spellcheck="true">;</span>\n  <span class="token function">forFn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  return temp<span class="token comment" spellcheck="true">;</span>\n}'},["code",'var data = [\n    {id: 1, address: "\u5b89\u5fbd", parent_id: 0},\n    {id: 2, address: "\u6c5f\u82cf", parent_id: 0},\n    {id: 3, address: "\u5408\u80a5", parent_id: 1},\n    {id: 4, address: "\u5e90\u9633\u533a", parent_id: 3},\n    {id: 5, address: "\u5927\u6768\u9547", parent_id: 4},\n    {id: 6, address: "\u5357\u4eac", parent_id: 2},\n    {id: 7, address: "\u7384\u6b66\u533a", parent_id: 6},\n    {id: 8, address: "\u6885\u56ed\u65b0\u6751\u8857\u9053", parent_id: 7},\n    {id: 9, address: "\u4e0a\u6d77", parent_id: 0},\n    {id: 10, address: "\u9ec4\u6d66\u533a", parent_id: 9},\n    {id: 11, address: "\u5916\u6ee9", parent_id: 10},\n    {id: 12, address: "\u5b89\u5e86", parent_id: 1}\n];\n//\u6839\u636e\u6700\u540e\u4e00\u4e2a\u627e\u5230\u6574\u4e2a\u5bb6\u65cf\nfunction familyTree(arr, pid) {\n    var temp = [];\n    var forFn = function(arr, pid){\n        for (var i = 0; i < arr.length; i++) {\n            var item = arr[i];\n            if (item.id == pid) {\n                temp.push(item);\n\n                forFn(arr,item.parent_id);\n            }\n        }\n    };\n    forFn(arr, pid);\n    return temp;\n}\n//\u5b50\u5b59\u6811\uff0c\u4ece\u9876\u7ea7\u5f80\u4e0b\u627e\u5230\u662f\u6709\u7684\u5b50\u5b50\u5b59\u5b59\nfunction sonsTree(arr,id){\n    var temp = [],lev=0;\n    var forFn = function(arr, id,lev){\n        for (var i = 0; i < arr.length; i++) {\n            var item = arr[i];\n            if (item.parent_id==id) {\n                item.lev=lev;\n                temp.push(item);\n                forFn(arr,item.id,lev+1);\n            }\n        }\n    };\n    forFn(arr, id,lev);\n    return temp;\n}\nvar tree = sonsTree(data,0);\nvar temp = [];\nfor(var i=0;i<tree.length;i++){\n    var item = tree[i],u = "";\n    if(i>0){\n        u = "</ul>";\n    }\n    if(item[\'lev\']==0){\n        temp.push(u+\'<li><a class="one">\'+item.address+\'</a><ul>\');\n    }else{\n        temp.push(\'<li><a>\'+item.address+\'</a></li>\')\n    }\n    if(i+1==tree.length){\n        temp.push("</ul>")\n    }\n}\ntemp = temp.join("")\ndocument.getElementById("sidebar-nav").innerHTML=temp\n\n\n\n\n\n\nInfiniteCycle(arr){\n  var temp = [];\n  var forFn = function(arr){\n      for (var i = 0; i < arr.length; i++) {\n          if(arr[i].children){\n              console.log(arr[i].title)\n              for (var j = 0; j < arr[i].children.length; j++) {\n                  if(arr[i].children[j].children){\n                      console.log(arr[i].children[j].title)\n                      forFn(arr[i].children[j].children);\n                  }\n              }\n          }else{\n              var tpl = `<li class="nav-item"><router-link :to=${arr[i].path} class="nav-link"><i class="icon-speedometer"></i> ${arr[i].title} <span class="badge badge-info">NEW</span></router-link></li>`\n              temp.push(tpl);;\n          }\n      }\n  };\n  forFn(arr);\n  return temp;\n}']],["h4","\u5411\u4e0a\u641c\u7d22\u67d0\u4e00\u8282\u70b9\u7684\u6240\u6709\u7236\u8282\u70b9id"],["pre",{lang:null,highlighted:'function <span class="token function">searchnode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>{\n    var that <span class="token operator">=</span> this<span class="token comment" spellcheck="true">;</span>\n    function <span class="token function">push_data</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>{\n        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n        <span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>\n    }\n\n    var arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">,</span>result <span class="token operator">=</span> void <span class="token number">0</span>\n            <span class="token punctuation">,</span>dom <span class="token operator">=</span> that<span class="token punctuation">.</span>models <span class="token operator">/</span><span class="token operator">/</span>\u672a\u5904\u7406\u524d\u7684\u6570\u636e\n    <span class="token operator">/</span><span class="token operator">/</span> title \u89e3\u6790\n            <span class="token punctuation">,</span>titleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">,</span>id <span class="token operator">=</span> void <span class="token number">0</span>\n\n    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n     <span class="token operator">*</span> Title\u5b57\u7b26 \u89e3\u6790\n     <span class="token operator">*</span><span class="token operator">/</span>\n            <span class="token comment" spellcheck="true">;(function(){</span>\n        dom<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>{\n            <span class="token function">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id <span class="token operator">==</span> index<span class="token punctuation">)</span>{\n                titleArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n            }\n        }<span class="token punctuation">)</span>\n    }<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    titleArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>{\n        <span class="token function">search</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    }<span class="token punctuation">)</span>\n    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n     <span class="token operator">*</span> \u5411\u4e0a\u641c\u7d22\n     <span class="token operator">*</span><span class="token operator">/</span>\n    function <span class="token function">search</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>{\n        <span class="token function">if</span><span class="token punctuation">(</span>!id<span class="token punctuation">)</span>return <span class="token boolean">false</span>\n        dom<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>{\n            <span class="token function">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span>{\n                <span class="token function">push_data</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n            }\n        }<span class="token punctuation">)</span>\n    }\n    return arr<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> arr\n}\n<span class="token operator">/</span><span class="token operator">/</span>\u8c03\u7528\n<span class="token function">searchnode</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>'},["code","function searchnode(index){\n    var that = this;\n    function push_data(a){\n        arr.push(a.id)\n        search(a.pid)\n    }\n\n    var arr = []\n            ,result = void 0\n            ,dom = that.models //\u672a\u5904\u7406\u524d\u7684\u6570\u636e\n    // title \u89e3\u6790\n            ,titleArr = []\n            ,id = void 0\n\n    /**\n     * Title\u5b57\u7b26 \u89e3\u6790\n     */\n            ;(function(){\n        dom.forEach(function(e){\n            if(e.id == index){\n                titleArr.push(e)\n            }\n        })\n    })()\n    titleArr.forEach(function(e){\n        search(e.id)\n    })\n    /**\n     * \u5411\u4e0a\u641c\u7d22\n     */\n    function search(id){\n        if(!id)return false\n        dom.forEach(function(e){\n            if(e.id == id){\n                push_data(e)\n            }\n        })\n    }\n    return arr.length === 0 ? 0 : arr\n}\n//\u8c03\u7528\nsearchnode(id)"]],["h4","\u5c06json\u4e32\u8f6c\u6362\u6210\u6811\u5f62\u7ed3\u6784"],["pre",{lang:null,highlighted:'function <span class="token function">transData</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> idStr<span class="token punctuation">,</span> pidStr<span class="token punctuation">,</span> chindrenStr<span class="token punctuation">)</span> {\n    var r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hash <span class="token operator">=</span> {}<span class="token punctuation">,</span> id <span class="token operator">=</span> idStr<span class="token punctuation">,</span> pid <span class="token operator">=</span> pidStr<span class="token punctuation">,</span> children <span class="token operator">=</span> chindrenStr<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">; i &lt; len; i++) {</span>\n        hash<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n    }\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">; j &lt; len; j++) {</span>\n        var aVal <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> hashVP <span class="token operator">=</span> hash<span class="token punctuation">[</span>aVal<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashVP<span class="token punctuation">)</span> {\n            !hashVP<span class="token punctuation">[</span>children<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>hashVP<span class="token punctuation">[</span>children<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            hashVP<span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>aVal<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        } <span class="token keyword">else</span> {\n            r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>aVal<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n    }\n    return r<span class="token comment" spellcheck="true">;</span>\n}\n<span class="token operator">/</span><span class="token operator">/</span>\u8c03\u7528\uff1a<span class="token function">transData</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">\'id\'</span><span class="token punctuation">,</span> <span class="token string">\'pid\'</span><span class="token punctuation">,</span> <span class="token string">\'children\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","function transData(a, idStr, pidStr, chindrenStr) {\n    var r = [], hash = {}, id = idStr, pid = pidStr, children = chindrenStr, i = 0, j = 0, len = a.length;\n    for (; i < len; i++) {\n        hash[a[i][id]] = a[i];\n    }\n    for (; j < len; j++) {\n        var aVal = a[j], hashVP = hash[aVal[pid]];\n        if (hashVP) {\n            !hashVP[children] && (hashVP[children] = []);\n            hashVP[children].push(aVal);\n        } else {\n            r.push(aVal);\n        }\n    }\n    return r;\n}\n//\u8c03\u7528\uff1atransData(array, 'id', 'pid', 'children');"]],["h4","\u6570\u7ec4\u5bf9\u8c61\u91cc\u91cd\u590d\u7684\u5168\u90e8\u53bb\u9664"],["pre",{lang:null,highlighted:'function <span class="token function">removeRepeat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>{\n    var result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hash <span class="token operator">=</span> {}<span class="token punctuation">,</span>hash_ <span class="token operator">=</span> {}\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i&lt;tmp.length; i++) {</span>\n        var elem <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n        var elem_ <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>!hash<span class="token punctuation">[</span>elem<span class="token punctuation">]</span><span class="token punctuation">)</span> {\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>!hash_<span class="token punctuation">[</span>elem_<span class="token punctuation">]</span><span class="token punctuation">)</span> {\n                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                hash_<span class="token punctuation">[</span>elem_<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">;</span>\n            }<span class="token comment" spellcheck="true">;</span>\n            hash<span class="token punctuation">[</span>elem<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">;</span>\n        }\n    }\n    return result<span class="token comment" spellcheck="true">;</span>\n}\n<span class="token operator">/</span><span class="token operator">/</span>\u8c03\u7528\uff1a\nvar tmp <span class="token operator">=</span><span class="token punctuation">[</span>\n    {\n        <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token string">"sys_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:15:08"</span><span class="token punctuation">,</span>\n        <span class="token string">"loc_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:16:38"</span>\n    }<span class="token punctuation">,</span>\n    {\n        <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token string">"sys_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:15:08"</span><span class="token punctuation">,</span>\n        <span class="token string">"loc_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:15:38"</span>\n    }<span class="token punctuation">,</span>\n    {\n        <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token string">"sys_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:15:08"</span><span class="token punctuation">,</span>\n        <span class="token string">"loc_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:15:38"</span>\n    }\n<span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeRepeat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span>\u5f97\u5230\n{\n    <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token string">"sys_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:15:08"</span><span class="token punctuation">,</span>\n    <span class="token string">"loc_time"</span><span class="token punctuation">:</span> <span class="token string">"2015-03-09 15:16:38"</span>\n}'},["code",'function removeRepeat(tmp){\n    var result = [], hash = {},hash_ = {}\n    for (var i = 0; i<tmp.length; i++) {\n        var elem = tmp[i];\n        var elem_ = tmp[i];\n        if (!hash[elem]) {\n            if (!hash_[elem_]) {\n                result.push(tmp[i]);\n                hash_[elem_] = true;\n            };\n            hash[elem] = true;\n        }\n    }\n    return result;\n}\n//\u8c03\u7528\uff1a\nvar tmp =[\n    {\n        "id":1,\n        "sys_time": "2015-03-09 15:15:08",\n        "loc_time": "2015-03-09 15:16:38"\n    },\n    {\n        "id":2,\n        "sys_time": "2015-03-09 15:15:08",\n        "loc_time": "2015-03-09 15:15:38"\n    },\n    {\n        "id":2,\n        "sys_time": "2015-03-09 15:15:08",\n        "loc_time": "2015-03-09 15:15:38"\n    }\n]\nconsole.log(removeRepeat(tmp))\n//\u5f97\u5230\n{\n    "id":1,\n    "sys_time": "2015-03-09 15:15:08",\n    "loc_time": "2015-03-09 15:16:38"\n}']],["h4","\u6570\u7ec4\u5bf9\u8c61\u91cc\u91cd\u590d\u7684\u4fdd\u7559\u4e00\u4e2a"],["pre",{lang:null,highlighted:'   <span class="token operator">/</span><span class="token operator">/</span>\u5c06\u5bf9\u8c61\u5143\u7d20\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u4ee5\u4f5c\u6bd4\u8f83  \n   function <span class="token function">obj2key</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">)</span>{  \n       var n <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">,</span>  \n           key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;  </span>\n       <span class="token function">while</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">)</span>{  \n           key<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;  </span>\n       }  \n       return key<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'|\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;  </span>\n    }  \n    <span class="token operator">/</span><span class="token operator">/</span>\u53bb\u91cd\u64cd\u4f5c  \n    function <span class="token function">uniqeByKeys</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>keys<span class="token punctuation">)</span>{  \n       var arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;  </span>\n       var hash <span class="token operator">=</span> {}<span class="token comment" spellcheck="true">;  </span>\n       <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">; i &lt; j; i++) { </span>\n           var k <span class="token operator">=</span> <span class="token function">obj2key</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;  </span>\n           <span class="token keyword">if</span> <span class="token punctuation">(</span>!<span class="token punctuation">(</span>k <span class="token keyword">in</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> {  \n               hash<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">;  </span>\n               arr <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;  </span>\n           }  \n       }  \n       return arr <span class="token comment" spellcheck="true">;  </span>\n    }  \n    <span class="token operator">/</span><span class="token operator">/</span>\u8fdb\u884c\u53bb\u91cd\n    var array <span class="token operator">=</span> <span class="token punctuation">[</span>  \n       {a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">4</span>}<span class="token punctuation">,</span>  \n       {a<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">44</span>}<span class="token punctuation">,</span>  \n       {a<span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">444</span>}<span class="token punctuation">,</span>  \n       {a<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">44</span>}<span class="token punctuation">,</span>  \n       {a<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">444</span>}  \n    <span class="token punctuation">]</span><span class="token comment" spellcheck="true">;  </span>\n    var arr <span class="token operator">=</span> <span class="token function">uniqeByKeys</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;  </span>\n    <span class="token operator">/</span><span class="token operator">/</span>\u5f97\u5230\n    <span class="token punctuation">[</span>  \n       {a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">4</span>}<span class="token punctuation">,</span>  \n       {a<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">44</span>}<span class="token punctuation">,</span>  \n       {a<span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span>d<span class="token punctuation">:</span><span class="token number">444</span>}  \n       <span class="token punctuation">]</span><span class="token comment" spellcheck="true">;  </span>'},["code","   //\u5c06\u5bf9\u8c61\u5143\u7d20\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u4ee5\u4f5c\u6bd4\u8f83  \n   function obj2key(obj, keys){  \n       var n = keys.length,  \n           key = [];  \n       while(n--){  \n           key.push(obj[keys[n]]);  \n       }  \n       return key.join('|');  \n    }  \n    //\u53bb\u91cd\u64cd\u4f5c  \n    function uniqeByKeys(array,keys){  \n       var arr = [];  \n       var hash = {};  \n       for (var i = 0, j = array.length; i < j; i++) { \n           var k = obj2key(array[i], keys);  \n           if (!(k in hash)) {  \n               hash[k] = true;  \n               arr .push(array[i]);  \n           }  \n       }  \n       return arr ;  \n    }  \n    //\u8fdb\u884c\u53bb\u91cd\n    var array = [  \n       {a:1,b:2,c:3,d:4},  \n       {a:11,b:22,c:333,d:44},  \n       {a:111,b:222,c:333,d:444},  \n       {a:11,b:22,c:33,d:44},  \n       {a:11,b:22,c:33,d:444}  \n    ];  \n    var arr = uniqeByKeys(array,['a','b']);  \n    //\u5f97\u5230\n    [  \n       {a:1,b:2,c:3,d:4},  \n       {a:11,b:22,c:333,d:44},  \n       {a:111,b:222,c:333,d:444}  \n       ];  "]],["h4","\u4ea7\u751f\u968f\u673a\u6570"],["pre",{lang:null,highlighted:'function <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    var i<span class="token punctuation">,</span> random<span class="token comment" spellcheck="true">;</span>\n    var uuid <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i &lt; 32; i++) {</span>\n        random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> | <span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">8</span> || i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">12</span> || i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">16</span> || i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> {\n            uuid <span class="token operator">+=</span> <span class="token string">\'-\'</span><span class="token comment" spellcheck="true">;</span>\n        }\n        uuid <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token number">4</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">?</span> <span class="token punctuation">(</span>random <span class="token operator">&amp;</span> <span class="token number">3</span> | <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> random<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n    return uuid<span class="token comment" spellcheck="true">;</span>\n}'},["code","function uuid() {\n    var i, random;\n    var uuid = '';\n    for (i = 0; i < 32; i++) {\n        random = Math.random() * 16 | 0;\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\n            uuid += '-';\n        }\n        uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);\n    }\n    return uuid;\n}"]],["h4","\u8bfb\u53d6\u5b58\u50a8"],["pre",{lang:null,highlighted:'function <span class="token function">store</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> data<span class="token punctuation">)</span> {\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> {\n        return localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    } <span class="token keyword">else</span> {\n        var store <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        return <span class="token punctuation">(</span>store <span class="token operator">&amp;</span><span class="token operator">&amp;</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">)</span> || <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n    }\n}'},["code","function store(namespace, data) {\n    if (arguments.length > 1) {\n        return localStorage.setItem(namespace, JSON.stringify(data));\n    } else {\n        var store = localStorage.getItem(namespace);\n        return (store && JSON.parse(store)) || [];\n    }\n}"]],["h4","\u66ff\u6362\u6a21\u677f"],["pre",{lang:null,highlighted:'function <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> {\n        return <span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n    }\n    var str <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">; i &lt; length; i++) {</span>\n        var re <span class="token operator">=</span> new <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\\\{"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\\\}"</span><span class="token punctuation">,</span> <span class="token string">"gm"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n    return str<span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>\n<span class="token operator">/</span><span class="token operator">/</span>\u4f7f\u7528\uff1a\nitemTpl \uff1a\n<span class="token operator">&lt;</span>li urlto<span class="token operator">=</span><span class="token string">"{1}"</span> class<span class="token operator">=</span><span class="token string">"typhoon_about_example_url"</span><span class="token operator">></span>{<span class="token number">0</span>}<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n<span class="token operator">/</span><span class="token operator">/</span>\u66ff\u6362\nitemTpl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../template/item.tpl\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\nvar itemHtml <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span>itemTpl<span class="token punctuation">,</span> text<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\nvar example <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token string">\'#typhoon_about_example ul\'</span><span class="token punctuation">)</span>\nexample<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>itemHtml<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code",'function format() {\n    if (arguments.length === 0) {\n        return null;\n    }\n    var str = arguments[0];\n    for (var i = 1, length = arguments.length; i < length; i++) {\n        var re = new RegExp("\\\\{" + (i - 1) + "\\\\}", "gm");\n        str = str.replace(re, arguments[i]);\n    }\n    return str;\n};\n//\u4f7f\u7528\uff1a\nitemTpl \uff1a\n<li urlto="{1}" class="typhoon_about_example_url">{0}</li>\n//\u66ff\u6362\nitemTpl = require(\'../template/item.tpl\');\nvar itemHtml = format(itemTpl, text, url);\nvar example = $(\'#typhoon_about_example ul\')\nexample.append(itemHtml);']]],meta:{title:"js\u5e38\u7528\u65b9\u6cd5",publishDate:"2019-05-14T00:00:00.000Z",category:"development",abstract:"\u5de5\u4f5c\u4e2djs\u5e38\u7528\u65b9\u6cd5",filename:"posts/techdoc/javascript/js-method.md"}}}});